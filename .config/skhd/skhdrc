# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

:: default : sketchybar --set skhd_status label=''

:: open_app : sketchybar --set skhd_status label='open app'
alt - a ; open_app
open_app < escape ; default

:: modify_window : sketchybar --set skhd_status label='modify window'
alt - s ; modify_window
modify_window < escape ; default

alt - return : kitty --single-instance -d ~

alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
alt - l : yabai -m window --focus east

alt + shift - h : yabai -m window --warp west
alt + shift - j : yabai -m window --warp south
alt + shift - k : yabai -m window --warp north
alt + shift - l : yabai -m window --warp east

alt - n         : yabai -m space --create && index=$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index') && yabai -m space --focus "${index}"
alt + shift - n : yabai -m space --create && index=$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index') && yabai -m window --space "${index}" && yabai -m space --focus "${index}"
alt - d         : yabai -m space --destroy

alt - x : yabai -m space --focus recent
alt - 1 : yabai -m space --focus 1
alt - 2 : yabai -m space --focus 2
alt - 3 : yabai -m space --focus 3
alt - 4 : yabai -m space --focus 4
alt - 5 : yabai -m space --focus 5
alt - 6 : yabai -m space --focus 6
alt - 7 : yabai -m space --focus 7
alt - 8 : yabai -m space --focus 8
alt - 9 : yabai -m space --focus 9
alt - 0 : yabai -m space --focus 0

alt + shift - 1 : yabai -m window --space 1; yabai -m space --focus 1
alt + shift - 2 : yabai -m window --space 2; yabai -m space --focus 2
alt + shift - 3 : yabai -m window --space 3; yabai -m space --focus 3
alt + shift - 4 : yabai -m window --space 4; yabai -m space --focus 4
alt + shift - 5 : yabai -m window --space 5; yabai -m space --focus 5
alt + shift - 6 : yabai -m window --space 6; yabai -m space --focus 6
alt + shift - 7 : yabai -m window --space 7; yabai -m space --focus 7
alt + shift - 8 : yabai -m window --space 8; yabai -m space --focus 8
alt + shift - 9 : yabai -m window --space 9; yabai -m space --focus 9

lctrl + alt - h : yabai -m window --resize left:-50:0 ; yabai -m window --resize right:-50:0
lctrl + alt - j : yabai -m window --resize bottom:0:50 ; yabai -m window --resize top:0:50
lctrl + alt - k : yabai -m window --resize top:0:-50 ; yabai -m window --resize bottom:0:-50
lctrl + alt - l : yabai -m window --resize right:50:0 ; yabai -m window --resize left:50:0
lctrl + alt - e : yabai -m space --balance

alt - r         : yabai -m space --rotate 270
shift + alt - r : yabai -m space --rotate 90

shift + alt - space : yabai -m window --toggle float

alt - f : yabai -m window --toggle zoom-fullscreen

alt - e : yabai -m window --toggle split

modify_window < s : yabai -m window --toggle sticky ; skhd -k 'escape'
modify_window < t : yabai -m window --toggle topmost ; skhd -k 'escape'
modify_window < f : yabai -m window --toggle float ; skhd -k 'escape'

open_app < m : ~/.config/skhd/scripts/activate_or_open_app.sh 'Messages' ; skhd -k 'escape'
open_app < t : ~/.config/skhd/scripts/activate_or_open_app.sh 'Kitty' ; skhd -k 'escape'
open_app < c : ~/.config/skhd/scripts/activate_or_open_app.sh 'Google Chrome' ; skhd -k 'escape'
