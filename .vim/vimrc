set nocompatible

filetype off

so ~/.vim/plugins.vim

filetype plugin indent on

syntax on

let c_comment_strings = 1 " use string highlighting in comments: "like this"

if &term =~ '256color'
    set t_ut=
endif

let g:dracula_colorterm = 0
"let g:dracula_italic = 0

" enable italics
let &t_ZH = "\e[3m"
let &t_ZR = "\e[23m"

colorscheme dracula

set colorcolumn=100
highlight ColorColumn ctermbg=darkgray

set visualbell noerrorbells

set ruler " show cursor position at all times
set number
set nowrap
set gdefault

set backspace=indent,eol,start

set ttimeout " time out for key codes
set ttimeoutlen=30 " 30 ms

set statusline=%<%f\ %h%m%r%{kite#statusline()}%=%-14.(%l,%c%V%)\ %P
set laststatus=2

python3 from powerline.vim import setup as powerline_setup
python3 powerline_setup()
python3 del powerline_setup

set noshowmode

set hidden

set encoding=utf-8

set tabstop=4 shiftwidth=4 softtabstop=4 expandtab " 4 space tabs

" unless it's css or html
autocmd Filetype css setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 softtabstop=2 expandtab

" and make and asm are archaic
autocmd FileType make setlocal shiftwidth=8 softtabstop=0 noexpandtab
autocmd FileType asm setlocal shiftwidth=8 softtabstop=0 noexpandtab syntax=nasm

autocmd FileType tex setlocal colorcolumn= wrap

set hlsearch " highlight last search

set history=200 " keep 200 lines of command line history
set showcmd " display incomplete commands
set wildmenu " display completion matches in a status line

set display=truncate " show @@@ in the last line if it is truncated

set scrolloff=5 " scroll with N extra lines on the top/bottom

if has('reltime')
  set incsearch " do incremental searching
endif

autocmd BufWinEnter *.* silent loadview
autocmd BufWinLeave *.* mkview


" youcompleteme

let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
let g:ycm_filetype_blacklist = { 'vimshell': 1 }

if !exists("g:ycm_semantic_triggers")
  let g:ycm_semantic_triggers = {}
endif

let g:ycm_semantic_triggers['typescript'] = ['.']


" eregex

let g:eregex_default_enable = 1
let g:eregex_force_case = 1
let g:eregex_forward_delim = '/'
let g:eregex_backward_delim = '?'


" kite

let g:kite_auto_complete = 1
let g:kite_tab_complete = 1
let g:kite_snippets = 1


set completeopt-=menu
set completeopt+=menuone   " Show the completions UI even with only 1 item
set completeopt-=longest   " Don't insert the longest common text
set completeopt-=preview   " Hide the documentation preview window
set completeopt+=noinsert  " Don't insert text automatically
set completeopt-=noselect  " Highlight the first completion automatically


let mapleader = ','
let maplocalleader = '='


" key mappings

nnoremap <leader>/ :call eregex#toggle()<CR>
nnoremap S :%S/

autocmd FileType python nnoremap <leader>p :call flake8#Flake8()<CR>
let g:flake8_show_in_file = 1

nnoremap ; :
vnoremap ; :
inoremap kj <Esc>
cnoremap kj <C-c>

nnoremap <leader><leader> :retab<CR>:w<CR>:sus<CR>
nnoremap \\ :retab<CR>:wq<CR>

nnoremap <C-d> :YcmCompleter GoTo<CR>

command NT NERDTree

nnoremap <leader>l :ls<CR>
nnoremap <leader>b :bp<CR>
nnoremap <leader>f :bn<CR>
nnoremap <leader>g :e#<CR>
nnoremap <leader>1 :1b<CR>
nnoremap <leader>2 :2b<CR>
nnoremap <leader>3 :3b<CR>
nnoremap <leader>4 :4b<CR>
nnoremap <leader>5 :5b<CR>
nnoremap <leader>6 :6b<CR>
nnoremap <leader>7 :7b<CR>
nnoremap <leader>8 :8b<CR>
nnoremap <leader>9 :9b<CR>
nnoremap <leader>0 :10b<CR>

nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>
